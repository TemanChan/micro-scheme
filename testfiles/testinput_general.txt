(+ 2 3.5) 
(+ 3.5 2) 
(+ 1 2 3 (+ 2.1 3.1) ) 
(+ 1 2 (+ 2.1 3.1) 3 ) 
(+ 1 (+ 2.1 3.1) 2 3 ) 
(+ 1.2 2.2 3.2 (+ 2 3) ) 
(+ 1.2 2.2 (+ 2 3) 3.2 )
(+ 1.2 (+ 2 3) 2.2 3.2 ) 
(+ (+ 1 4) (+ 2 3) (+ 3 1.2) (+ 4 1.5 1.7) (+ 5 6 7 8 9) ) 
(if 1 1.1)
(if 1.1 1 2.2) 
(if 1.2 (+ 2 3) 2.2) 
(if 1.2 (ceiling 2.3) (+ 2.2 3.2) ) 
(+ 1 2 (if 3 1) ) 
(if (+ 2 3) (if 3.14 2.17) (+ 6 4) ) 
(+ (if (+ 2 3) (ceiling (if 3.14 2.17) ) ) (+ 6 4) ) 
(if (+ (if 2 3.6) (if 4 3) ) (+ 1 3.1) ) 
(+ 1 2 (ceiling 3.1) ) 
(if (ceiling 0.1) (+ 3.14 2.17) (if 6 4) ) 
(if (ceiling -0.1) (+ 3.14 2.17) (if 6 4) ) 
(ceiling (if 2.2 3.0) ) 
(ceiling (+ 1 1.2) ) 
(ceiling (+ 1.1 1.2) ) 
(ceiling (+ (if (+ (if 1.1 2.4) (+ 1.2 1.5) ) 1.5) (if 1.1 1.2) ) ) 
(define v 3)
(< (+ (+ 1 4) (+ 2 3) (+ 3 1.2) (+ 4 1.5 1.7) (+ 5 6 7 8 9) ))
(< (+ (+ (- (- 1 2) (* 1 2)) (* 1 2)) (/ 1 2)))
(not (* (+) (- 1) (*) (/ 3.0)))
(not (quote (not (* ((quote floor) (+ 1 1.2)) 2))))
(< (not (not 1)) 0.5)
(/ (if (not (quote ())) 1.1 2.2))
(ceiling (if (< 5 3.2) 3.4 5.6))
(< v (not v))
(eval (car (quote (v))))
(eval (eval (eval (eval (eval v)))))
(ceiling (eval (quote (/ 1.5 v))))
(define a (quote ((if (not v) + -) v 1.5)))
a
(< v (eval a))
(if (eval (eval a)) (define b (+ (eval a) (eval v))) (define b (- (eval a) (eval v))))
b
(define c (car (cdr (cdr a))))
c
(* (* v b c) (/ 100.0 v b c))
(define d (quote (quote (quote (quote (* v b c))))))
(eval (car (cdr (eval (eval (eval d))))))
(print (define e (cons (quote v) (quote ()))))
(print (car e))
(print (print (print v)))
(lambda (x y z) (* x y z))
(define multiply (lambda (x y z) (* x y z)))
(define multiply-tracing (lambda (x y z) (print (quote multiplying..)) (* x y z)))
((lambda (x y) (+ x y)) 2 3)
(multiply 2 3 4)
(multiply-tracing 2 3 4)
(apply multiply (quote (2 3 4)))
(define apply-to-2-3-4 (lambda (f) (apply f (quote (2 3 4)))))
(apply-to-2-3-4 multiply)
(define foo (lambda () (print (quote Hello)) (print (quote world)) (print (quote !!))))
(foo)
(define z 3)
((lambda (x) (+ x z)) 2)
(define x 4)
((lambda (x) (+ x z)) 2)
(factorial 1)
(factorial 4)
(factorial 10)
(> 2 5)
(>= 3 2)
(<= 3 3)
(= 2 2)
(= 2 3)
(= 3 2)
(abs 3)
(abs -3)
((lambda (x y) (* x y)) 2 3)
(let ((x 2) (y 3)) (* x y))
(define square (lambda (x) (print (* x x))))
(for-each square (quote (2 5 9 14 256)))
(define first (lambda args (car args)))
(first (quote a) (quote b) (quote c))
(first (quote a) (quote b) (quote c) (quote d) (quote e) (quote f))
(equal? (quote (a)) (quote ((a))))
(equal? (quote a) (quote (a)))
(equal? (quote a) (quote a))
(equal? (quote (a)) (quote (a)))
(equal? (quote (a)) (quote ((a))))
(equal? (quote a) (quote (a)))
(equal? (quote (5 a b)) (cons 5 (quote (a b))))
(equal? 2 2.0)
(equal? 2 2)
(equal? (quote (5 a b)) (cons 5 (quote (a b))))
(list-tail (quote (a b c d e f g h 1 2 3 4 5)) 5)
(list-tail (quote (a b c d e)) 2)
(list-ref (quote (a b c d e)) 2)
(list-ref (quote (a b c d e f g h 1 2 3 4 5)) 5)
(reverse (quote (a b c d e f g h 1 2 3 4 5)) )
(reverse (quote (a (b c (d e) (1 2 3)) ((4 5 1.2 3.4) (a b) c))))
(reverse (quote (a (b c) d (e (f)))))
(define e2 (quote ((a 1) (b 2.3) (c d))))
e2
(assoc (quote a) e2)
(assoc (quote b) e2)
(assoc (quote d) e2)
(assoc (list (quote a)) (quote (((a)) ((b)) ((c)))))
(assoc 5 (quote ((2 3)  (5 7) (11 13))))
(list-partition even? (quote (3 1 4 1 5 9 2 6 5 3 5 9 10 20 30 40)))
(list-sort < (quote (3 1 4 1 5 9 2 6)))
(list-sort > (quote (3 1 4 1 5 9 2 6 5 3 5 9 10 20 30 40)))
(define apply-print (lambda (proc) (lambda args (print (apply proc args)))))
(for-each (apply-print +) (list 1 2 3 4 5 6 7.8 9.0 10.11))
(for-each (apply-print +) (list 1 2 3 4 5.6 7.8 9.0) (list 0.9 8.7 6.5 4 3 2 1))
(for-each (apply-print *) (list 1 2 3 4 5.6 7.8 9.0) (list 0.9 8.7 6.5 4 3 2 1) (list 12 23 34 45 56 67 78))
(for-each (apply-print <) (list 1 2 3 4 5.6 7.8 9.0) (list 0.9 8.7 6.5 4 3 2 1))
(for-each (apply-print *) (list 1 2 3 4 5) (list 6 7 8 9 1.2) (list 1 2 3 4 5) (list 6 7 8 9 1.2) (list 1 2 3 4 5) (list 6 7 8 9 1.2) (list 1 2 3 4 5) (list 6 7 8 9 1.2) (list 1 2 3 4 5) (list 6 7 8 9 1.2) (list 1 2 3 4 5) (list 6 7 8 9 1.2) (list 1 2 3 4 5) (list 6 7 8 9 1.2) (list 1 2 3 4 5) (list 6 7 8 9 1.2) (list 1 2 3 4 5) (list 6 7 8 9 1.2) (list 1 2 3 4 5) (list 6 7 8 9 1.2))
(define hehe (lambda (x)
					  ((lambda () ((lambda () ((lambda () ((lambda () (lambda args (print (apply x args)))))))))))))
((hehe *) 10 20 23 4 51 34.5)
(define hehehe (lambda () (let () (let () (let () (let () (lambda () (print e2))))))))
((hehehe))
